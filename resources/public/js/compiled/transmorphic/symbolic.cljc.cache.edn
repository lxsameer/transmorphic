;; Analyzed by ClojureScript 1.7.170
{:use-macros {with-pprint-dispatch cljs.pprint}, :excludes #{}, :name transmorphic.symbolic, :imports nil, :requires {cljs.pprint cljs.pprint, cljs.tools.reader cljs.tools.reader, cljs.analyzer cljs.analyzer, transmorphic.globals transmorphic.globals, r clojure.core.reducers, clojure.core.reducers clojure.core.reducers, clojure.string clojure.string, z clojure.zip, clojure.zip clojure.zip}, :uses {pprint cljs.pprint, join clojure.string, replace-first clojure.string, code-dispatch cljs.pprint, split-lines clojure.string, read-string cljs.tools.reader, *print-right-margin* cljs.pprint}, :defs {unquote-splicing? {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 63, :column 7, :end-line 63, :end-column 24, :arglists (quote ([form]))}, :name transmorphic.symbolic/unquote-splicing?, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 24, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, each-morph-call-in {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 172, :column 7, :end-line 172, :end-column 25, :arglists (quote ([form transform & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(form transform args)], :arglists ([form transform & args]), :arglists-meta (nil)}}, :name transmorphic.symbolic/each-morph-call-in, :variadic true, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(form transform args)], :arglists ([form transform & args]), :arglists-meta (nil)}, :method-params [(form transform args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 2, :fn-var true, :arglists ([form transform & args])}, quote-fn {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 87, :column 7, :end-line 87, :end-column 15, :arglists (quote ([resolver form]))}, :name transmorphic.symbolic/quote-fn, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 15, :method-params ([resolver form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([resolver form]))}, analyze-body! {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 303, :column 7, :end-line 303, :end-column 20, :arglists (quote ([defmorph-body id-stack]))}, :name transmorphic.symbolic/analyze-body!, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 20, :method-params ([defmorph-body id-stack]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 303, :end-line 303, :max-fixed-arity 2, :fn-var true, :arglists (quote ([defmorph-body id-stack]))}, get-class {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 98, :column 7, :end-line 98, :end-column 16, :arglists (quote ([node]))}, :name transmorphic.symbolic/get-class, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 16, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, analyze-expr! {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 256, :column 7, :end-line 256, :end-column 20, :arglists (quote ([expr change-integrator morph-idx id-stack]))}, :name transmorphic.symbolic/analyze-expr!, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 20, :method-params ([expr change-integrator morph-idx id-stack]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 4, :fn-var true, :arglists (quote ([expr change-integrator morph-idx id-stack]))}, ctx-param-name {:name transmorphic.symbolic/ctx-param-name, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 37, :column 1, :end-line 37, :end-column 20, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 37, :column 6, :end-line 37, :end-column 20}}, render-def? {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 145, :column 7, :end-line 145, :end-column 18, :arglists (quote ([form]))}, :name transmorphic.symbolic/render-def?, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 18, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, update-ns-source! {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 29, :column 7, :end-line 29, :end-column 24, :arglists (quote ([ns]))}, :name transmorphic.symbolic/update-ns-source!, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 24, :method-params ([ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ns]))}, tree-children {:name transmorphic.symbolic/tree-children, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 115, :column 1, :end-line 115, :end-column 24, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 115, :column 11, :end-line 115, :end-column 24}}, tree-make-node {:name transmorphic.symbolic/tree-make-node, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 121, :column 1, :end-line 121, :end-column 25, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 121, :column 11, :end-line 121, :end-column 25}}, ellipse? {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 148, :column 7, :end-line 148, :end-column 15, :arglists (quote ([m]))}, :name transmorphic.symbolic/ellipse?, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 15, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, get-description {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 335, :column 7, :end-line 335, :end-column 22, :arglists (quote ([state morph reconciler cached-descriptions]))}, :name transmorphic.symbolic/get-description, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 22, :method-params ([state morph reconciler cached-descriptions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 4, :fn-var true, :arglists (quote ([state morph reconciler cached-descriptions]))}, each-morph-call-out {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 151, :column 7, :end-line 151, :end-column 26, :arglists (quote ([form transform & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(form transform args)], :arglists ([form transform & args]), :arglists-meta (nil)}}, :name transmorphic.symbolic/each-morph-call-out, :variadic true, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(form transform args)], :arglists ([form transform & args]), :arglists-meta (nil)}, :method-params [(form transform args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 2, :fn-var true, :arglists ([form transform & args])}, *gensyms* {:name transmorphic.symbolic/*gensyms*, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 47, :column 1, :end-line 47, :end-column 35, :private true, :dynamic true, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 47, :column 26, :end-line 47, :end-column 35, :private true, :dynamic true}}, tree-zipper {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 134, :column 7, :end-line 134, :end-column 18, :arglists (quote ([node]))}, :name transmorphic.symbolic/tree-zipper, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 18, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, n-resolve {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 49, :column 8, :end-line 49, :end-column 17, :private true, :arglists (quote ([sym]))}, :private true, :name transmorphic.symbolic/n-resolve, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 17, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, unquote? {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 60, :column 7, :end-line 60, :end-column 15, :arglists (quote ([form]))}, :name transmorphic.symbolic/unquote?, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 15, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, *resolve* {:name transmorphic.symbolic/*resolve*, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 45, :column 1, :end-line 45, :end-column 25, :dynamic true, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 45, :column 16, :end-line 45, :end-column 25, :dynamic true}}, template {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 92, :column 11, :end-line 92, :end-column 19, :macro true, :arglists (quote ([form]))}, :name transmorphic.symbolic/template, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 19, :method-params ([&form &env form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :macro true, :end-line 92, :max-fixed-arity 3, :fn-var true, :arglists (quote ([form]))}, morph? {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 137, :column 7, :end-line 137, :end-column 13, :arglists (quote ([m]))}, :name transmorphic.symbolic/morph?, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 13, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, bound-props {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 242, :column 7, :end-line 242, :end-column 18, :arglists (quote ([props]))}, :name transmorphic.symbolic/bound-props, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 18, :method-params ([props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 1, :fn-var true, :arglists (quote ([props]))}, tree-branch? {:name transmorphic.symbolic/tree-branch?, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 108, :column 1, :end-line 108, :end-column 23, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 108, :column 11, :end-line 108, :end-column 23}}, get-component-def {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 383, :column 7, :end-line 383, :end-column 24, :arglists (quote ([state root-morph reconciler]))}, :name transmorphic.symbolic/get-component-def, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 24, :method-params ([state root-morph reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 383, :end-line 383, :max-fixed-arity 3, :fn-var true, :arglists (quote ([state root-morph reconciler]))}, format-code {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 31, :column 16, :end-line 31, :end-column 27, :arglists (quote ([form]))}, :name transmorphic.symbolic/format-code, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 27, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, quote-fn* {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 66, :column 8, :end-line 66, :end-column 17, :private true, :arglists (quote ([form]))}, :private true, :name transmorphic.symbolic/quote-fn*, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 17, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, inject-ctx-parameter {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 213, :column 7, :end-line 213, :end-column 27, :arglists (quote ([form])), :doc "Find that place where render definition resides, and\n   add an additional render-context variable"}, :name transmorphic.symbolic/inject-ctx-parameter, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 27, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form])), :doc "Find that place where render definition resides, and\n   add an additional render-context variable"}, instrument-call {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 196, :column 7, :end-line 196, :end-column 22, :arglists (quote ([call {:keys [edit-session id-stack], :as env}])), :doc "Alter all occuring calls to morphs, parts or widgets\n   such thath they are aware, they are being used in the\n   context of the current abstraction.\n   It also wraps the morph into a function call\n   that closes over all the context related information\n   needed to inspect the morph hierarchy through tooling."}, :name transmorphic.symbolic/instrument-call, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 22, :method-params ([call p__30343]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 2, :fn-var true, :arglists (quote ([call {:keys [edit-session id-stack], :as env}])), :doc "Alter all occuring calls to morphs, parts or widgets\n   such thath they are aware, they are being used in the\n   context of the current abstraction.\n   It also wraps the morph into a function call\n   that closes over all the context related information\n   needed to inspect the morph hierarchy through tooling."}, get-external-reconciliation {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 313, :column 7, :end-line 313, :end-column 34, :arglists (quote ([state morph])), :doc "Returns the symbolic description of a morph\n  hierarchy outside of a symbolic functional scope.\n  This is essentially a composition of morph calls,\n  with custom behavior stripped away and and other functional\n  abstractions removed. The only other kinds of abstractions,\n  that an external reconciliation maintains are calls to other\n  components, which function as 'abstractional strongholds'."}, :name transmorphic.symbolic/get-external-reconciliation, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 34, :method-params ([state morph]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 313, :end-line 313, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state morph])), :doc "Returns the symbolic description of a morph\n  hierarchy outside of a symbolic functional scope.\n  This is essentially a composition of morph calls,\n  with custom behavior stripped away and and other functional\n  abstractions removed. The only other kinds of abstractions,\n  that an external reconciliation maintains are calls to other\n  components, which function as 'abstractional strongholds'."}, foreign? {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 19, :column 7, :end-line 19, :end-column 15, :arglists (quote ([state a b])), :doc "A morph is foreign to another one, if\n  he is an orphan or the owner are always\n  different regardless how high we walk up\n  the owner chain"}, :name transmorphic.symbolic/foreign?, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 15, :method-params ([state a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 3, :fn-var true, :arglists (quote ([state a b])), :doc "A morph is foreign to another one, if\n  he is an orphan or the owner are always\n  different regardless how high we walk up\n  the owner chain"}, template-fn {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 95, :column 7, :end-line 95, :end-column 18, :arglists (quote ([form]))}, :name transmorphic.symbolic/template-fn, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 18, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, component? {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 141, :column 7, :end-line 141, :end-column 17, :arglists (quote ([c]))}, :name transmorphic.symbolic/component?, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 17, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, orphan? {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 13, :column 7, :end-line 13, :end-column 14, :arglists (quote ([morph]))}, :name transmorphic.symbolic/orphan?, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 14, :method-params ([morph]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([morph]))}, get-internal-reconciliation {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 390, :column 7, :end-line 390, :end-column 34, :arglists (quote ([state morph])), :doc "Given a morph, return its symbolic consolidation\n  within the context of the abstraction it is the root of.\n  If morph is not a root of a component,\n  this falls back to an external reconciliation if the"}, :name transmorphic.symbolic/get-internal-reconciliation, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 34, :method-params ([state morph]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 390, :end-line 390, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state morph])), :doc "Given a morph, return its symbolic consolidation\n  within the context of the abstraction it is the root of.\n  If morph is not a root of a component,\n  this falls back to an external reconciliation if the"}, fetch-ns-source {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 27, :column 7, :end-line 27, :end-column 22, :arglists (quote ([ns]))}, :name transmorphic.symbolic/fetch-ns-source, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 22, :method-params ([ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ns]))}, instrument-body! {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :line 233, :column 7, :end-line 233, :end-column 23, :arglists (quote ([component-body env]))}, :name transmorphic.symbolic/instrument-body!, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/symbolic.cljc", :end-column 23, :method-params ([component-body env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 233, :end-line 233, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component-body env]))}}, :require-macros {cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:reification submorphs :root? :children :source-location self :m_1 :else cljs.core/hash-map cljs.core/apply :edit-session :default :added :name cljs.core/concat :reconciler :txs cljs.core/set :type transmorphic.core/wrap-component :op :vector :component :array clojure.core/unquote-splicing :keys transmorphic.core/wrap-morph :hash-map :expr :submorph-locations :list :var :id-stack :ellipse cljs.core/fn clojure.core/unquote cljs.core/vec render-ctx__30307__auto__ :abstraction :form cljs.core/assoc render quote :submorphs :hierarchy :morph props-txs cljs.core/list cljs.core/merge :owner :removed :props}, :order [:owner render-ctx__30307__auto__ clojure.core/unquote clojure.core/unquote-splicing quote cljs.core/concat cljs.core/vec cljs.core/apply cljs.core/hash-map cljs.core/set cljs.core/list :else :vector :list :array :default :hierarchy :hash-map render :ellipse :type :edit-session :id-stack transmorphic.core/wrap-morph cljs.core/assoc :source-location transmorphic.core/wrap-component :children :form :var :op :morph :component :txs :props :added :removed :submorph-locations :reification cljs.core/fn self props-txs submorphs cljs.core/merge :expr :keys :root? :abstraction :name :submorphs :m_1 :reconciler]}, :doc nil}