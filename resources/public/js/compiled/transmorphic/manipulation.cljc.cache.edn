;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name transmorphic.manipulation, :imports nil, :requires nil, :uses nil, :defs {changes-on-morph {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 88, :column 7, :end-line 88, :end-column 23, :arglists (quote ([path]))}, :name transmorphic.manipulation/changes-on-morph, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 23, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, set-id {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 222, :column 7, :end-line 222, :end-column 13, :arglists (quote ([parent idx new-id]))}, :name transmorphic.manipulation/set-id, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 13, :method-params ([parent idx new-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 3, :fn-var true, :arglists (quote ([parent idx new-id]))}, ensure-root-node {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 114, :column 7, :end-line 114, :end-column 23, :arglists (quote ([path]))}, :name transmorphic.manipulation/ensure-root-node, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 23, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, track-changes! {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 107, :column 7, :end-line 107, :end-column 21, :arglists (quote ([morph path]))}, :name transmorphic.manipulation/track-changes!, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 21, :method-params ([morph path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 2, :fn-var true, :arglists (quote ([morph path]))}, add-morph! {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 170, :column 7, :end-line 170, :end-column 17, :arglists (quote ([self morph] [self morph changes])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([self morph] [self morph changes]), :arglists ([self morph] [self morph changes]), :arglists-meta (nil nil)}}, :name transmorphic.manipulation/add-morph!, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([self morph] [self morph changes]), :arglists ([self morph] [self morph changes]), :arglists-meta (nil nil)}, :method-params ([self morph] [self morph changes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 3, :fn-var true, :arglists ([self morph] [self morph changes])}, clear-txs-for! {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 120, :column 7, :end-line 120, :end-column 21, :arglists (quote ([path]))}, :name transmorphic.manipulation/clear-txs-for!, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 21, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, IManipulation {:meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 5, :column 14, :end-line 5, :end-column 27, :doc "The set of operations that can be enacted on a morphic\n  entity through the halo.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {add-morph [[self morph]], remove-morph [[self id]], set-prop [[self prop value]]}}}, :protocol-symbol true, :name transmorphic.manipulation/IManipulation, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 27, :column 1, :line 5, :protocol-info {:methods {add-morph [[self morph]], remove-morph [[self id]], set-prop [[self prop value]]}}, :info nil, :end-line 5, :impls #{}, :doc "The set of operations that can be enacted on a morphic\n  entity through the halo.", :jsdoc ("@interface")}, move-morph! {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 129, :column 7, :end-line 129, :end-column 18, :arglists (quote ([from-lens to-lens]))}, :name transmorphic.manipulation/move-morph!, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 18, :method-params ([from-lens to-lens]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([from-lens to-lens]))}, set-prop {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 10, :column 4, :end-line 10, :end-column 12, :protocol transmorphic.manipulation/IManipulation, :doc "Set prop of morph to value", :arglists (quote ([self prop value]))}, :protocol transmorphic.manipulation/IManipulation, :name transmorphic.manipulation/set-prop, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 12, :method-params ([self prop value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 10, :max-fixed-arity 3, :fn-var true, :arglists (quote ([self prop value])), :doc "Set prop of morph to value"}, remove-morph {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 9, :column 4, :end-line 9, :end-column 16, :protocol transmorphic.manipulation/IManipulation, :doc "Remove morph with given id", :arglists (quote ([self id]))}, :protocol transmorphic.manipulation/IManipulation, :name transmorphic.manipulation/remove-morph, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 16, :method-params ([self id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([self id])), :doc "Remove morph with given id"}, incorporate {:name transmorphic.manipulation/incorporate, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 76, :column 1, :end-line 76, :end-column 22, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 76, :column 11, :end-line 76, :end-column 22}}, revert-tx! {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 124, :column 7, :end-line 124, :end-column 17, :arglists (quote ([tx-id])), :doc "Undo the transaction given by the tx-id.\n  tx-id is of the form [[:structure | :prop-changes][idx | prop-name]]"}, :name transmorphic.manipulation/revert-tx!, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 17, :method-params ([tx-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tx-id])), :doc "Undo the transaction given by the tx-id.\n  tx-id is of the form [[:structure | :prop-changes][idx | prop-name]]"}, without! {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 147, :column 7, :end-line 147, :end-column 15, :arglists (quote ([path]))}, :name transmorphic.manipulation/without!, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 15, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, set-prop! {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 133, :column 7, :end-line 133, :end-column 16, :arglists (quote ([path prop value]))}, :name transmorphic.manipulation/set-prop!, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 16, :method-params ([path prop value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 3, :fn-var true, :arglists (quote ([path prop value]))}, apply-interactions {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 236, :column 7, :end-line 236, :end-column 25, :arglists (quote ([world] [morph txs])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([world] [morph txs]), :arglists ([world] [morph txs]), :arglists-meta (nil nil)}}, :name transmorphic.manipulation/apply-interactions, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([world] [morph txs]), :arglists ([world] [morph txs]), :arglists-meta (nil nil)}, :method-params ([world] [morph txs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 2, :fn-var true, :arglists ([world] [morph txs])}, ensure-node {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 111, :column 7, :end-line 111, :end-column 18, :arglists (quote ([node path]))}, :name transmorphic.manipulation/ensure-node, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 18, :method-params ([node path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node path]))}, add-evolvement! {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 209, :column 7, :end-line 209, :end-column 22, :arglists (quote ([path evolve-fn]))}, :name transmorphic.manipulation/add-evolvement!, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 22, :method-params ([path evolve-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 209, :end-line 209, :max-fixed-arity 2, :fn-var true, :arglists (quote ([path evolve-fn]))}, ad-hoc-id {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 164, :column 7, :end-line 164, :end-column 16, :arglists (quote ([submorphs]))}, :name transmorphic.manipulation/ad-hoc-id, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 16, :method-params ([submorphs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([submorphs]))}, empty-node {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 91, :column 7, :end-line 91, :end-column 17, :arglists (quote ([morph]))}, :name transmorphic.manipulation/empty-node, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 17, :method-params ([morph]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([morph]))}, apply-tx {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 229, :column 7, :end-line 229, :end-column 15, :arglists (quote ([tx morph]))}, :name transmorphic.manipulation/apply-tx, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 15, :method-params ([tx morph]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 229, :end-line 229, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tx morph]))}, orphanize {:name transmorphic.manipulation/orphanize, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 24, :column 1, :end-line 24, :end-column 20, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 24, :column 11, :end-line 24, :end-column 20}}, add-morph {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 213, :column 7, :end-line 213, :end-column 16, :arglists (quote ([parent morph morph-id]))}, :name transmorphic.manipulation/add-morph, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 16, :method-params ([parent morph morph-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 3, :fn-var true, :arglists (quote ([parent morph morph-id]))}, set-id! {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :line 196, :column 7, :end-line 196, :end-column 14, :arglists (quote ([path new-id]))}, :name transmorphic.manipulation/set-id!, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljc/transmorphic/manipulation.cljc", :end-column 14, :method-params ([path new-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 2, :fn-var true, :arglists (quote ([path new-id]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:role :path :new-id :backup :source-location :overridden-props :default :part :props-atom :consolidated-abstraction :reconciler :coll :op :node-type :overridden :without :ordering :alias :on-morph-add :structure :root :id :prop-changes :add-morph :set-id :idx :orphan :change-integrator :submorphs :hierarchy :morph :abstraction-name :model :props}, :order [:hierarchy :role :default :part :model :abstraction-name :source-location :orphan :submorphs :reconciler :root :node-type :structure :prop-changes :change-integrator :coll :op :idx :backup :without :ordering :on-morph-add :props :id :path :morph :add-morph :alias :new-id :set-id :overridden-props :props-atom :overridden :consolidated-abstraction]}, :doc nil}