;; Analyzed by ClojureScript 1.7.170
{:use-macros {defcomponent transmorphic.core}, :excludes #{}, :name transmorphic.tools.hand, :imports nil, :requires {om om.next, om.next om.next, transmorphic.event transmorphic.event, transmorphic.symbolic transmorphic.symbolic, transmorphic.morph transmorphic.morph, transmorphic.core transmorphic.core, transmorphic.utils transmorphic.utils}, :uses {universe transmorphic.core, rerender! transmorphic.core, morph-under-me transmorphic.morph, hand-focus transmorphic.event, get-cursor-pos transmorphic.event, rectangle transmorphic.core, text transmorphic.core, $morph transmorphic.morph, get-client-pos transmorphic.event, ellipse? transmorphic.symbolic, move-morph! transmorphic.core, is-submorph? transmorphic.morph, local-offset transmorphic.morph, move-component! transmorphic.core, position-in-world transmorphic.morph, IInitialize transmorphic.core, add-points transmorphic.utils, behavior transmorphic.morph, set-prop! transmorphic.core, IRender transmorphic.core, get-root transmorphic.core, eval-reactive-prop transmorphic.morph, IRefresh transmorphic.core, delta transmorphic.utils, eucl-distance transmorphic.utils}, :defs {handle-grab-or-drag {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :line 82, :column 7, :end-line 82, :end-column 26, :arglists (quote ([hand hand-position]))}, :name transmorphic.tools.hand/handle-grab-or-drag, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :end-column 26, :method-params ([hand hand-position]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([hand hand-position]))}, hand-morph {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :line 133, :column 15, :end-line 133, :end-column 25, :arglists (quote ([props__30808__auto__ & submorphs__30809__auto__])), :doc nil, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(props__30808__auto__ submorphs__30809__auto__)], :arglists ([props__30808__auto__ & submorphs__30809__auto__]), :arglists-meta (nil)}}, :name transmorphic.tools.hand/hand-morph, :variadic true, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(props__30808__auto__ submorphs__30809__auto__)], :arglists ([props__30808__auto__ & submorphs__30809__auto__]), :arglists-meta (nil)}, :method-params [(props__30808__auto__ submorphs__30809__auto__)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 1, :fn-var true, :arglists ([props__30808__auto__ & submorphs__30809__auto__]), :doc nil}, map->hand-morph* {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__32543])), :file nil}, :name transmorphic.tools.hand/map->hand-morph*, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :method-params ([G__32543]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 133, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__32543]))}, grab-component! {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :line 30, :column 7, :end-line 30, :end-column 22, :arglists (quote ([component]))}, :name transmorphic.tools.hand/grab-component!, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :end-column 22, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component]))}, drop-component! {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :line 41, :column 7, :end-line 41, :end-column 22, :arglists (quote ([component]))}, :name transmorphic.tools.hand/drop-component!, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :end-column 22, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component]))}, grab-morph! {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :line 55, :column 7, :end-line 55, :end-column 18, :arglists (quote ([morph])), :doc "Moves the morph (if not moved already) referenced \n   by morph-id to the hand of the\n   system. This bypasses the usual grabbing mechanism!"}, :name transmorphic.tools.hand/grab-morph!, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :end-column 18, :method-params ([morph]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([morph])), :doc "Moves the morph (if not moved already) referenced \n   by morph-id to the hand of the\n   system. This bypasses the usual grabbing mechanism!"}, drop-morph! {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :line 66, :column 7, :end-line 66, :end-column 18, :arglists (quote ([morph])), :doc "Moves the morph currently residing in the hand morph\n   onto the one directly beneath it."}, :name transmorphic.tools.hand/drop-morph!, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :end-column 18, :method-params ([morph]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([morph])), :doc "Moves the morph currently residing in the hand morph\n   onto the one directly beneath it."}, in-hand? {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :line 130, :column 7, :end-line 130, :end-column 15, :arglists (quote ([morph]))}, :name transmorphic.tools.hand/in-hand?, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :end-column 15, :method-params ([morph]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([morph]))}, ->hand-morph* {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([component-id local-state parent props txs reconciler abstraction submorphs source-location])), :file nil}, :name transmorphic.tools.hand/->hand-morph*, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :method-params ([component-id local-state parent props txs reconciler abstraction submorphs source-location]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 133, :max-fixed-arity 9, :fn-var true, :arglists (quote ([component-id local-state parent props txs reconciler abstraction submorphs source-location]))}, local-hand-name {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :line 26, :column 7, :end-line 26, :end-column 22, :arglists (quote ([]))}, :name transmorphic.tools.hand/local-hand-name, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, IRender {:impls (transmorphic.tools.hand/hand-morph*)}, grabbable {:name transmorphic.tools.hand/grabbable, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :line 128, :column 1, :end-line 128, :end-column 19, :declared true, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :line 128, :column 10, :end-line 128, :end-column 19, :declared true}}, hand-morph* {:num-fields 9, :protocols #{cljs.core/IRecord transmorphic.core/IComponent? transmorphic.core/IRender cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted transmorphic.core/IMorph? cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name transmorphic.tools.hand/hand-morph*, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/hand.cljs", :type true, :column 1, :internal-ctor true, :line 133, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}}, :require-macros {transmorphic.core transmorphic.core, om om.next, om.next om.next}, :cljs.analyzer/constants {:seen #{:y :reification :active? abstraction :morph-id submorphs :source-location local-state :prev-pos self :m_1 :drop-shadow? hand-morph rectangle :parent props :added :ns :name source-location :fill :reconciler :txs :on-drop :on-drag-stop :type :draggable? parent :on-drag transmorphic.tools.hand :grabbable? add-points reconciler txs :grabbed-morph :on-drag-start :dragged-morph :expr :submorph-locations :id local-hand-name IRender :extent :component-id :position :abstraction :x render :submorphs :morph :local-state component-id :removed :start-pos :on-grab :props}, :order [:position :drop-shadow? :x :y :morph-id :start-pos :prev-pos :local-state :dragged-morph :grabbed-morph :props :draggable? :on-drag-start :on-drag :on-drag-stop :grabbable? :on-grab :on-drop :component-id :parent :txs :reconciler :abstraction :submorphs :source-location :id :fill :extent component-id local-state parent props txs reconciler abstraction submorphs source-location :active? :reification :type :submorph-locations :expr rectangle local-hand-name add-points :added :removed :morph :m_1 IRender render self :ns :name transmorphic.tools.hand hand-morph]}, :doc nil}