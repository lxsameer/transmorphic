;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros, defcomponent transmorphic.core, go-loop cljs.core.async.macros}, :excludes #{}, :name transmorphic.tools.function-editor, :imports nil, :requires {transmorphic.morph transmorphic.morph, transmorphic.core transmorphic.core, transmorphic.symbolic transmorphic.symbolic, transmorphic.tools.window transmorphic.tools.window, transmorphic.tools.ace transmorphic.tools.ace, transmorphic.repl transmorphic.repl, cljs.reader cljs.reader, clojure.string clojure.string, cljs.pprint cljs.pprint}, :uses {universe transmorphic.core, toggle-reconciler! transmorphic.core, rerender! transmorphic.core, set-change-handler! transmorphic.tools.ace, pprint cljs.pprint, setup-ace! transmorphic.tools.ace, set-value! transmorphic.tools.ace, join clojure.string, rectangle transmorphic.core, text transmorphic.core, code-dispatch cljs.pprint, $morph transmorphic.morph, create-abstraction! transmorphic.core, get-ns-source transmorphic.repl, $source transmorphic.morph, update-abstraction! transmorphic.core, checkbox transmorphic.core, split-lines clojure.string, $component transmorphic.morph, ace transmorphic.core, $parent transmorphic.morph, set-save-handler! transmorphic.tools.ace, IRender transmorphic.core, window transmorphic.tools.window, get-component-def transmorphic.symbolic, format-code transmorphic.symbolic, orphaned? transmorphic.morph, read-string cljs.reader, *print-right-margin* cljs.pprint, get-external-reconciliation transmorphic.symbolic, refresh-scene! transmorphic.core}, :defs {component-editor* {:num-fields 9, :protocols #{cljs.core/IRecord transmorphic.core/IComponent? transmorphic.core/IRender cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted transmorphic.core/IMorph? cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name transmorphic.tools.function-editor/component-editor*, :file "src/cljs/transmorphic/tools/function_editor.cljs", :type true, :column 1, :internal-ctor true, :line 117, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, get-slice-for-defn {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/function_editor.cljs", :line 19, :column 7, :end-line 19, :end-column 25, :arglists (quote ([source defn-name]))}, :name transmorphic.tools.function-editor/get-slice-for-defn, :variadic false, :file "src/cljs/transmorphic/tools/function_editor.cljs", :end-column 25, :method-params ([source defn-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([source defn-name]))}, get-defn-in-source {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/function_editor.cljs", :line 50, :column 7, :end-line 50, :end-column 25, :arglists (quote ([component source]))}, :name transmorphic.tools.function-editor/get-defn-in-source, :variadic false, :file "src/cljs/transmorphic/tools/function_editor.cljs", :end-column 25, :method-params ([component source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component source]))}, get-description-for {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/function_editor.cljs", :line 38, :column 7, :end-line 38, :end-column 26, :arglists (quote ([component root-morph]))}, :name transmorphic.tools.function-editor/get-description-for, :variadic false, :file "src/cljs/transmorphic/tools/function_editor.cljs", :end-column 26, :method-params ([component root-morph]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component root-morph]))}, save-handler {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/function_editor.cljs", :line 83, :column 7, :end-line 83, :end-column 19, :arglists (quote ([{:keys [local-state], :as self} component root-morph ns-source {:keys [description ns name create?]}]))}, :name transmorphic.tools.function-editor/save-handler, :variadic false, :file "src/cljs/transmorphic/tools/function_editor.cljs", :end-column 19, :method-params ([p__33157 component root-morph ns-source p__33158]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 5, :fn-var true, :arglists (quote ([{:keys [local-state], :as self} component root-morph ns-source {:keys [description ns name create?]}]))}, refresh-editor! {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/function_editor.cljs", :line 58, :column 7, :end-line 58, :end-column 22, :arglists (quote ([{:keys [local-state], :as self} ace-editor root-morph ns-source component]))}, :name transmorphic.tools.function-editor/refresh-editor!, :variadic false, :file "src/cljs/transmorphic/tools/function_editor.cljs", :end-column 22, :method-params ([p__33152 ace-editor root-morph ns-source component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 5, :fn-var true, :arglists (quote ([{:keys [local-state], :as self} ace-editor root-morph ns-source component]))}, IRender {:impls (transmorphic.tools.function-editor/component-editor*)}, ->component-editor* {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([component-id local-state parent props txs reconciler abstraction submorphs source-location])), :file nil}, :name transmorphic.tools.function-editor/->component-editor*, :variadic false, :file "src/cljs/transmorphic/tools/function_editor.cljs", :method-params ([component-id local-state parent props txs reconciler abstraction submorphs source-location]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 117, :max-fixed-arity 9, :fn-var true, :arglists (quote ([component-id local-state parent props txs reconciler abstraction submorphs source-location]))}, map->component-editor* {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__33195])), :file nil}, :name transmorphic.tools.function-editor/map->component-editor*, :variadic false, :file "src/cljs/transmorphic/tools/function_editor.cljs", :method-params ([G__33195]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__33195]))}, component-editor {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/function_editor.cljs", :line 117, :column 15, :end-line 117, :end-column 31, :arglists (quote ([props__30808__auto__ & submorphs__30809__auto__])), :doc nil, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(props__30808__auto__ submorphs__30809__auto__)], :arglists ([props__30808__auto__ & submorphs__30809__auto__]), :arglists-meta (nil)}}, :name transmorphic.tools.function-editor/component-editor, :variadic true, :file "src/cljs/transmorphic/tools/function_editor.cljs", :end-column 31, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(props__30808__auto__ submorphs__30809__auto__)], :arglists ([props__30808__auto__ & submorphs__30809__auto__]), :arglists-meta (nil)}, :method-params [(props__30808__auto__ submorphs__30809__auto__)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists ([props__30808__auto__ & submorphs__30809__auto__]), :doc nil}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, transmorphic.core transmorphic.core, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:y :reification :active? universe :description toggle-reconciler! abstraction abstraction-info :did-mount submorphs :new-source js/document rerender! :root? :source-location :checked? local-state setup-ace! :m_8 examples.playground self target-ref :m_1 :parent text props :on-close :font-size $morph :default p1__33189# :added :ns $source :name :spinner? :as source-location let -> :text-color :reconciler defcomponent :txs :start fn :type parent when p1__33188# on-close _ :component checkbox if symbol :title - or ace reconciler txs save-handler p1__33191# p1__33187# :keys :create? $parent update-in refresh-editor! :expr :submorph-locations fn* not :m_4 cljs.core/declare :id set-save-handler! IRender :compiling? :extent clojure.core/deref component window ns-source :locked? title root-morph :component-id :border-color :position :abstraction .getElementById :x p1__33190# p1__33186__auto__33192 render quote :end str :submorphs js/ace hash-map component-editor id :on-change extent :morph :local-state :step transmorphic.tools.function-editor :m_5 assoc editor :owner :target-ref component-id .edit :removed and :text-string :font-family :ace-id position get-in :m_7 :props}, :order [:start :end :root? defcomponent :name :abstraction :reconciler render self props submorphs IRender :id :props :local-state :locked? :active? :default :description :ns :create? cljs.core/declare :new-source :compiling? :component-id :parent :txs :submorphs :source-location :position :extent :target-ref :on-close :owner examples.playground :spinner? :title :ace-id :border-color :step :did-mount :text-string :font-family :text-color :font-size :x :y :on-change :checked? component-id local-state parent txs reconciler abstraction source-location :reification :type :submorph-locations :m_1 :keys :as position extent target-ref id on-close _ let root-morph $morph component and get-in clojure.core/deref universe abstraction-info or quote symbol str -> title ns-source $source editor .getElementById js/document .edit js/ace when set-save-handler! fn* p1__33186__auto__33192 save-handler assoc :expr text $parent p1__33190# hash-map - :added :removed :morph window fn rerender! :component p1__33187# :m_7 :m_8 :m_5 :m_4 ace if refresh-editor! setup-ace! checkbox p1__33188# update-in not p1__33189# toggle-reconciler! p1__33191# transmorphic.tools.function-editor component-editor]}, :doc nil}