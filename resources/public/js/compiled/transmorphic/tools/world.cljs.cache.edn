;; Analyzed by ClojureScript 1.7.170
{:use-macros {defcomponent transmorphic.core}, :excludes #{}, :name transmorphic.tools.world, :imports nil, :requires {transmorphic.event transmorphic.event, transmorphic.tools.halo transmorphic.tools.halo, transmorphic.utils transmorphic.utils, transmorphic.tools.window transmorphic.tools.window, transmorphic.tools.hand transmorphic.tools.hand, transmorphic.core transmorphic.core, om om.next, om.next om.next, transmorphic.morph transmorphic.morph, transmorphic.tools.function-editor transmorphic.tools.function-editor}, :uses {universe transmorphic.core, handle-grab-or-drag transmorphic.tools.hand, rerender! transmorphic.core, hand-focus transmorphic.event, hand-morph transmorphic.tools.hand, get-cursor-pos transmorphic.event, rectangle transmorphic.core, text transmorphic.core, meta-focus transmorphic.event, $morph transmorphic.morph, revert-history! transmorphic.core, update-dynamic-props! transmorphic.core, drop-hand-focus! transmorphic.event, position-in-world transmorphic.morph, $props transmorphic.morph, add-points transmorphic.utils, halo transmorphic.tools.halo, $parent transmorphic.morph, behavior transmorphic.morph, drop-meta-focus! transmorphic.event, local-hand-name transmorphic.tools.hand, window transmorphic.tools.window, history-count transmorphic.core, get-ref transmorphic.core, component-editor transmorphic.tools.function-editor, reverted-entities transmorphic.core, ellipse transmorphic.core, refresh-scene! transmorphic.core, meta-click? transmorphic.event, eucl-distance transmorphic.utils}, :defs {get-local-hkey {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/world.cljs", :line 21, :column 7, :end-line 21, :end-column 21, :arglists (quote ([]))}, :name transmorphic.tools.world/get-local-hkey, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/world.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, slider {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/world.cljs", :line 24, :column 3, :end-line 24, :end-column 9, :arglists (quote ([props__30808__auto__ & submorphs__30809__auto__])), :doc nil, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(props__30808__auto__ submorphs__30809__auto__)], :arglists ([props__30808__auto__ & submorphs__30809__auto__]), :arglists-meta (nil)}}, :name transmorphic.tools.world/slider, :variadic true, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/world.cljs", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(props__30808__auto__ submorphs__30809__auto__)], :arglists ([props__30808__auto__ & submorphs__30809__auto__]), :arglists-meta (nil)}, :method-params [(props__30808__auto__ submorphs__30809__auto__)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 23, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists ([props__30808__auto__ & submorphs__30809__auto__]), :doc nil}, slider* {:num-fields 9, :protocols #{cljs.core/IRecord transmorphic.core/IComponent? transmorphic.core/IRender cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted transmorphic.core/IMorph? cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name transmorphic.tools.world/slider*, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/world.cljs", :type true, :column 1, :internal-ctor true, :line 23, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->slider* {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([component-id local-state parent props txs reconciler abstraction submorphs source-location])), :file nil}, :name transmorphic.tools.world/->slider*, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/world.cljs", :method-params ([component-id local-state parent props txs reconciler abstraction submorphs source-location]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 23, :max-fixed-arity 9, :fn-var true, :arglists (quote ([component-id local-state parent props txs reconciler abstraction submorphs source-location]))}, map->slider* {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__33227])), :file nil}, :name transmorphic.tools.world/map->slider*, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/world.cljs", :method-params ([G__33227]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__33227]))}, world {:protocol-inline nil, :meta {:file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/world.cljs", :line 68, :column 15, :end-line 68, :end-column 20, :arglists (quote ([props__30808__auto__ & submorphs__30809__auto__])), :doc nil, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(props__30808__auto__ submorphs__30809__auto__)], :arglists ([props__30808__auto__ & submorphs__30809__auto__]), :arglists-meta (nil)}}, :name transmorphic.tools.world/world, :variadic true, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/world.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(props__30808__auto__ submorphs__30809__auto__)], :arglists ([props__30808__auto__ & submorphs__30809__auto__]), :arglists-meta (nil)}, :method-params [(props__30808__auto__ submorphs__30809__auto__)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists ([props__30808__auto__ & submorphs__30809__auto__]), :doc nil}, world* {:num-fields 9, :protocols #{cljs.core/IRecord transmorphic.core/IComponent? transmorphic.core/IRender cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted transmorphic.core/IMorph? cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name transmorphic.tools.world/world*, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/world.cljs", :type true, :column 1, :internal-ctor true, :line 68, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->world* {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([component-id local-state parent props txs reconciler abstraction submorphs source-location])), :file nil}, :name transmorphic.tools.world/->world*, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/world.cljs", :method-params ([component-id local-state parent props txs reconciler abstraction submorphs source-location]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 68, :max-fixed-arity 9, :fn-var true, :arglists (quote ([component-id local-state parent props txs reconciler abstraction submorphs source-location]))}, map->world* {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__33261])), :file nil}, :name transmorphic.tools.world/map->world*, :variadic false, :file "/Users/sameer.rahmani/.C/transmorphic/src/cljs/transmorphic/tools/world.cljs", :method-params ([G__33261]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__33261]))}}, :require-macros {transmorphic.core transmorphic.core, om om.next, om.next om.next}, :cljs.analyzer/constants {:seen #{:y :reification :active? target abstraction handle-grab-or-drag x :did-mount :morph-id submorphs rerender! on-change :source-location local-state :idle transmorphic.core/IRender < self :m_1 :drop-shadow? hand-morph get-cursor-pos rectangle :parent meta-focus disj props :on-close slider new-value y get-local-hkey :added :ns :name :as source-location * :fill :value conj let -> :reconciler :txs :width :edited-morphs fn :pivot-point :on-drag-stop :type :draggable? parent drop-hand-focus! when :hand-position > :on-drag _ :component if :on-mouse-down p1__33257# :title value or p1__33258# :current-ext add-points reconciler txs transmorphic.tools.world :keys halo width new-pos ec :on-drag-start update-in :expr :submorph-locations drop-meta-focus! fn* not :id :extent clojure.core/deref e / :wants-hand-focus? :on-mouse-move title :start-editing :current-pos current-ext :component-id :position :on-mouse-up for world :abstraction :x render :target str :submorphs component-editor :on-change :morph :local-state :m_5 ellipse :target-ref component-id meta-click? :removed and current-pos :edited-components position :props}, :order [:local-state :width :on-change :position :title :value :id :extent :fill :pivot-point :x :y :drop-shadow? :on-drag-stop :draggable? :on-drag :on-drag-start :wants-hand-focus? :current-pos :current-ext :source-location :component-id :parent :props :txs :reconciler :abstraction :submorphs component-id local-state parent props txs reconciler abstraction submorphs source-location :active? :reification :type :submorph-locations ellipse fn :keys x let current-pos current-ext value new-pos add-points if or < > new-value rerender! self when on-change / width y * :added :removed :morph rectangle :m_1 transmorphic.core/IRender render :as position title :expr :ns :name transmorphic.tools.world slider :did-mount :on-mouse-down :on-mouse-up :on-mouse-move :hand-position :edited-morphs :edited-components :on-close :target-ref :start-editing :target :idle :morph-id component-editor str ec _ fn* p1__33257# update-in disj :component :m_5 for hand-morph get-local-hkey -> halo target p1__33258# conj clojure.core/deref meta-focus e and not meta-click? drop-meta-focus! handle-grab-or-drag get-cursor-pos drop-hand-focus! world]}, :doc nil}